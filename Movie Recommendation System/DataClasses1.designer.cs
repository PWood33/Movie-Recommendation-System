#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Movie_Recommendation_System
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="pw3649f")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertadminmanagement(adminmanagement instance);
    partial void Updateadminmanagement(adminmanagement instance);
    partial void Deleteadminmanagement(adminmanagement instance);
    partial void Insertcategory(category instance);
    partial void Updatecategory(category instance);
    partial void Deletecategory(category instance);
    partial void Insertdownload(download instance);
    partial void Updatedownload(download instance);
    partial void Deletedownload(download instance);
    partial void Insertgenre(genre instance);
    partial void Updategenre(genre instance);
    partial void Deletegenre(genre instance);
    partial void Insertuserfeedback(userfeedback instance);
    partial void Updateuserfeedback(userfeedback instance);
    partial void Deleteuserfeedback(userfeedback instance);
    partial void Insertuserregister(userregister instance);
    partial void Updateuserregister(userregister instance);
    partial void Deleteuserregister(userregister instance);
    partial void Insertmovy(movy instance);
    partial void Updatemovy(movy instance);
    partial void Deletemovy(movy instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["pw3649fConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<adminmanagement> adminmanagements
		{
			get
			{
				return this.GetTable<adminmanagement>();
			}
		}
		
		public System.Data.Linq.Table<category> categories
		{
			get
			{
				return this.GetTable<category>();
			}
		}
		
		public System.Data.Linq.Table<download> downloads
		{
			get
			{
				return this.GetTable<download>();
			}
		}
		
		public System.Data.Linq.Table<genre> genres
		{
			get
			{
				return this.GetTable<genre>();
			}
		}
		
		public System.Data.Linq.Table<userfeedback> userfeedbacks
		{
			get
			{
				return this.GetTable<userfeedback>();
			}
		}
		
		public System.Data.Linq.Table<userregister> userregisters
		{
			get
			{
				return this.GetTable<userregister>();
			}
		}
		
		public System.Data.Linq.Table<movy> movies
		{
			get
			{
				return this.GetTable<movy>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.adminmanagement")]
	public partial class adminmanagement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _AdminID;
		
		private string _AdminFirstName;
		
		private string _AdminLastName;
		
		private string _AdminEmail;
		
		private string _AdminPassword;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAdminIDChanging(long value);
    partial void OnAdminIDChanged();
    partial void OnAdminFirstNameChanging(string value);
    partial void OnAdminFirstNameChanged();
    partial void OnAdminLastNameChanging(string value);
    partial void OnAdminLastNameChanged();
    partial void OnAdminEmailChanging(string value);
    partial void OnAdminEmailChanged();
    partial void OnAdminPasswordChanging(string value);
    partial void OnAdminPasswordChanged();
    #endregion
		
		public adminmanagement()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdminID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long AdminID
		{
			get
			{
				return this._AdminID;
			}
			set
			{
				if ((this._AdminID != value))
				{
					this.OnAdminIDChanging(value);
					this.SendPropertyChanging();
					this._AdminID = value;
					this.SendPropertyChanged("AdminID");
					this.OnAdminIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdminFirstName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string AdminFirstName
		{
			get
			{
				return this._AdminFirstName;
			}
			set
			{
				if ((this._AdminFirstName != value))
				{
					this.OnAdminFirstNameChanging(value);
					this.SendPropertyChanging();
					this._AdminFirstName = value;
					this.SendPropertyChanged("AdminFirstName");
					this.OnAdminFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdminLastName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string AdminLastName
		{
			get
			{
				return this._AdminLastName;
			}
			set
			{
				if ((this._AdminLastName != value))
				{
					this.OnAdminLastNameChanging(value);
					this.SendPropertyChanging();
					this._AdminLastName = value;
					this.SendPropertyChanged("AdminLastName");
					this.OnAdminLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdminEmail", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string AdminEmail
		{
			get
			{
				return this._AdminEmail;
			}
			set
			{
				if ((this._AdminEmail != value))
				{
					this.OnAdminEmailChanging(value);
					this.SendPropertyChanging();
					this._AdminEmail = value;
					this.SendPropertyChanged("AdminEmail");
					this.OnAdminEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdminPassword", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string AdminPassword
		{
			get
			{
				return this._AdminPassword;
			}
			set
			{
				if ((this._AdminPassword != value))
				{
					this.OnAdminPasswordChanging(value);
					this.SendPropertyChanging();
					this._AdminPassword = value;
					this.SendPropertyChanged("AdminPassword");
					this.OnAdminPasswordChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.category")]
	public partial class category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CategoryID;
		
		private int _GenreID;
		
		private string _CategoryTitle;
		
		private EntitySet<movy> _movies;
		
		private EntityRef<genre> _genre;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCategoryIDChanging(int value);
    partial void OnCategoryIDChanged();
    partial void OnGenreIDChanging(int value);
    partial void OnGenreIDChanged();
    partial void OnCategoryTitleChanging(string value);
    partial void OnCategoryTitleChanged();
    #endregion
		
		public category()
		{
			this._movies = new EntitySet<movy>(new Action<movy>(this.attach_movies), new Action<movy>(this.detach_movies));
			this._genre = default(EntityRef<genre>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GenreID", DbType="Int NOT NULL")]
		public int GenreID
		{
			get
			{
				return this._GenreID;
			}
			set
			{
				if ((this._GenreID != value))
				{
					if (this._genre.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGenreIDChanging(value);
					this.SendPropertyChanging();
					this._GenreID = value;
					this.SendPropertyChanged("GenreID");
					this.OnGenreIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryTitle", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string CategoryTitle
		{
			get
			{
				return this._CategoryTitle;
			}
			set
			{
				if ((this._CategoryTitle != value))
				{
					this.OnCategoryTitleChanging(value);
					this.SendPropertyChanging();
					this._CategoryTitle = value;
					this.SendPropertyChanged("CategoryTitle");
					this.OnCategoryTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="category_movy", Storage="_movies", ThisKey="CategoryID", OtherKey="CategoryID")]
		public EntitySet<movy> movies
		{
			get
			{
				return this._movies;
			}
			set
			{
				this._movies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="genre_category", Storage="_genre", ThisKey="GenreID", OtherKey="GenreID", IsForeignKey=true)]
		public genre genre
		{
			get
			{
				return this._genre.Entity;
			}
			set
			{
				genre previousValue = this._genre.Entity;
				if (((previousValue != value) 
							|| (this._genre.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._genre.Entity = null;
						previousValue.categories.Remove(this);
					}
					this._genre.Entity = value;
					if ((value != null))
					{
						value.categories.Add(this);
						this._GenreID = value.GenreID;
					}
					else
					{
						this._GenreID = default(int);
					}
					this.SendPropertyChanged("genre");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_movies(movy entity)
		{
			this.SendPropertyChanging();
			entity.category = this;
		}
		
		private void detach_movies(movy entity)
		{
			this.SendPropertyChanging();
			entity.category = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.download")]
	public partial class download : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DownloadID;
		
		private System.DateTime _DownloadDate;
		
		private int _RegistrationID;
		
		private int _MovieID;
		
		private EntityRef<userregister> _userregister;
		
		private EntityRef<movy> _movy;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDownloadIDChanging(int value);
    partial void OnDownloadIDChanged();
    partial void OnDownloadDateChanging(System.DateTime value);
    partial void OnDownloadDateChanged();
    partial void OnRegistrationIDChanging(int value);
    partial void OnRegistrationIDChanged();
    partial void OnMovieIDChanging(int value);
    partial void OnMovieIDChanged();
    #endregion
		
		public download()
		{
			this._userregister = default(EntityRef<userregister>);
			this._movy = default(EntityRef<movy>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DownloadID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DownloadID
		{
			get
			{
				return this._DownloadID;
			}
			set
			{
				if ((this._DownloadID != value))
				{
					this.OnDownloadIDChanging(value);
					this.SendPropertyChanging();
					this._DownloadID = value;
					this.SendPropertyChanged("DownloadID");
					this.OnDownloadIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DownloadDate", DbType="Date NOT NULL")]
		public System.DateTime DownloadDate
		{
			get
			{
				return this._DownloadDate;
			}
			set
			{
				if ((this._DownloadDate != value))
				{
					this.OnDownloadDateChanging(value);
					this.SendPropertyChanging();
					this._DownloadDate = value;
					this.SendPropertyChanged("DownloadDate");
					this.OnDownloadDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegistrationID", DbType="Int NOT NULL")]
		public int RegistrationID
		{
			get
			{
				return this._RegistrationID;
			}
			set
			{
				if ((this._RegistrationID != value))
				{
					if (this._userregister.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRegistrationIDChanging(value);
					this.SendPropertyChanging();
					this._RegistrationID = value;
					this.SendPropertyChanged("RegistrationID");
					this.OnRegistrationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MovieID", DbType="Int NOT NULL")]
		public int MovieID
		{
			get
			{
				return this._MovieID;
			}
			set
			{
				if ((this._MovieID != value))
				{
					if (this._movy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMovieIDChanging(value);
					this.SendPropertyChanging();
					this._MovieID = value;
					this.SendPropertyChanged("MovieID");
					this.OnMovieIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userregister_download", Storage="_userregister", ThisKey="RegistrationID", OtherKey="RegistrationID", IsForeignKey=true)]
		public userregister userregister
		{
			get
			{
				return this._userregister.Entity;
			}
			set
			{
				userregister previousValue = this._userregister.Entity;
				if (((previousValue != value) 
							|| (this._userregister.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._userregister.Entity = null;
						previousValue.downloads.Remove(this);
					}
					this._userregister.Entity = value;
					if ((value != null))
					{
						value.downloads.Add(this);
						this._RegistrationID = value.RegistrationID;
					}
					else
					{
						this._RegistrationID = default(int);
					}
					this.SendPropertyChanged("userregister");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="movy_download", Storage="_movy", ThisKey="MovieID", OtherKey="MovieID", IsForeignKey=true)]
		public movy movy
		{
			get
			{
				return this._movy.Entity;
			}
			set
			{
				movy previousValue = this._movy.Entity;
				if (((previousValue != value) 
							|| (this._movy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._movy.Entity = null;
						previousValue.downloads.Remove(this);
					}
					this._movy.Entity = value;
					if ((value != null))
					{
						value.downloads.Add(this);
						this._MovieID = value.MovieID;
					}
					else
					{
						this._MovieID = default(int);
					}
					this.SendPropertyChanged("movy");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.genre")]
	public partial class genre : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GenreID;
		
		private string _GenreName;
		
		private string _GenreDescription;
		
		private EntitySet<category> _categories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGenreIDChanging(int value);
    partial void OnGenreIDChanged();
    partial void OnGenreNameChanging(string value);
    partial void OnGenreNameChanged();
    partial void OnGenreDescriptionChanging(string value);
    partial void OnGenreDescriptionChanged();
    #endregion
		
		public genre()
		{
			this._categories = new EntitySet<category>(new Action<category>(this.attach_categories), new Action<category>(this.detach_categories));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GenreID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GenreID
		{
			get
			{
				return this._GenreID;
			}
			set
			{
				if ((this._GenreID != value))
				{
					this.OnGenreIDChanging(value);
					this.SendPropertyChanging();
					this._GenreID = value;
					this.SendPropertyChanged("GenreID");
					this.OnGenreIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GenreName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string GenreName
		{
			get
			{
				return this._GenreName;
			}
			set
			{
				if ((this._GenreName != value))
				{
					this.OnGenreNameChanging(value);
					this.SendPropertyChanging();
					this._GenreName = value;
					this.SendPropertyChanged("GenreName");
					this.OnGenreNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GenreDescription", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string GenreDescription
		{
			get
			{
				return this._GenreDescription;
			}
			set
			{
				if ((this._GenreDescription != value))
				{
					this.OnGenreDescriptionChanging(value);
					this.SendPropertyChanging();
					this._GenreDescription = value;
					this.SendPropertyChanged("GenreDescription");
					this.OnGenreDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="genre_category", Storage="_categories", ThisKey="GenreID", OtherKey="GenreID")]
		public EntitySet<category> categories
		{
			get
			{
				return this._categories;
			}
			set
			{
				this._categories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_categories(category entity)
		{
			this.SendPropertyChanging();
			entity.genre = this;
		}
		
		private void detach_categories(category entity)
		{
			this.SendPropertyChanging();
			entity.genre = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.userfeedback")]
	public partial class userfeedback : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReviewID;
		
		private int _MovieID;
		
		private int _RegistrationID;
		
		private byte _Ratings;
		
		private string _UserReviews;
		
		private EntityRef<userregister> _userregister;
		
		private EntityRef<movy> _movy;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReviewIDChanging(int value);
    partial void OnReviewIDChanged();
    partial void OnMovieIDChanging(int value);
    partial void OnMovieIDChanged();
    partial void OnRegistrationIDChanging(int value);
    partial void OnRegistrationIDChanged();
    partial void OnRatingsChanging(byte value);
    partial void OnRatingsChanged();
    partial void OnUserReviewsChanging(string value);
    partial void OnUserReviewsChanged();
    #endregion
		
		public userfeedback()
		{
			this._userregister = default(EntityRef<userregister>);
			this._movy = default(EntityRef<movy>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReviewID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ReviewID
		{
			get
			{
				return this._ReviewID;
			}
			set
			{
				if ((this._ReviewID != value))
				{
					this.OnReviewIDChanging(value);
					this.SendPropertyChanging();
					this._ReviewID = value;
					this.SendPropertyChanged("ReviewID");
					this.OnReviewIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MovieID", DbType="Int NOT NULL")]
		public int MovieID
		{
			get
			{
				return this._MovieID;
			}
			set
			{
				if ((this._MovieID != value))
				{
					if (this._movy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMovieIDChanging(value);
					this.SendPropertyChanging();
					this._MovieID = value;
					this.SendPropertyChanged("MovieID");
					this.OnMovieIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegistrationID", DbType="Int NOT NULL")]
		public int RegistrationID
		{
			get
			{
				return this._RegistrationID;
			}
			set
			{
				if ((this._RegistrationID != value))
				{
					if (this._userregister.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRegistrationIDChanging(value);
					this.SendPropertyChanging();
					this._RegistrationID = value;
					this.SendPropertyChanged("RegistrationID");
					this.OnRegistrationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ratings", DbType="TinyInt NOT NULL")]
		public byte Ratings
		{
			get
			{
				return this._Ratings;
			}
			set
			{
				if ((this._Ratings != value))
				{
					this.OnRatingsChanging(value);
					this.SendPropertyChanging();
					this._Ratings = value;
					this.SendPropertyChanged("Ratings");
					this.OnRatingsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserReviews", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string UserReviews
		{
			get
			{
				return this._UserReviews;
			}
			set
			{
				if ((this._UserReviews != value))
				{
					this.OnUserReviewsChanging(value);
					this.SendPropertyChanging();
					this._UserReviews = value;
					this.SendPropertyChanged("UserReviews");
					this.OnUserReviewsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userregister_userfeedback", Storage="_userregister", ThisKey="RegistrationID", OtherKey="RegistrationID", IsForeignKey=true)]
		public userregister userregister
		{
			get
			{
				return this._userregister.Entity;
			}
			set
			{
				userregister previousValue = this._userregister.Entity;
				if (((previousValue != value) 
							|| (this._userregister.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._userregister.Entity = null;
						previousValue.userfeedbacks.Remove(this);
					}
					this._userregister.Entity = value;
					if ((value != null))
					{
						value.userfeedbacks.Add(this);
						this._RegistrationID = value.RegistrationID;
					}
					else
					{
						this._RegistrationID = default(int);
					}
					this.SendPropertyChanged("userregister");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="movy_userfeedback", Storage="_movy", ThisKey="MovieID", OtherKey="MovieID", IsForeignKey=true)]
		public movy movy
		{
			get
			{
				return this._movy.Entity;
			}
			set
			{
				movy previousValue = this._movy.Entity;
				if (((previousValue != value) 
							|| (this._movy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._movy.Entity = null;
						previousValue.userfeedbacks.Remove(this);
					}
					this._movy.Entity = value;
					if ((value != null))
					{
						value.userfeedbacks.Add(this);
						this._MovieID = value.MovieID;
					}
					else
					{
						this._MovieID = default(int);
					}
					this.SendPropertyChanged("movy");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.userregister")]
	public partial class userregister : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RegistrationID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Address;
		
		private string _Telephone;
		
		private string _Email;
		
		private string _Password;
		
		private EntitySet<download> _downloads;
		
		private EntitySet<userfeedback> _userfeedbacks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRegistrationIDChanging(int value);
    partial void OnRegistrationIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnTelephoneChanging(string value);
    partial void OnTelephoneChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
		
		public userregister()
		{
			this._downloads = new EntitySet<download>(new Action<download>(this.attach_downloads), new Action<download>(this.detach_downloads));
			this._userfeedbacks = new EntitySet<userfeedback>(new Action<userfeedback>(this.attach_userfeedbacks), new Action<userfeedback>(this.detach_userfeedbacks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegistrationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RegistrationID
		{
			get
			{
				return this._RegistrationID;
			}
			set
			{
				if ((this._RegistrationID != value))
				{
					this.OnRegistrationIDChanging(value);
					this.SendPropertyChanging();
					this._RegistrationID = value;
					this.SendPropertyChanged("RegistrationID");
					this.OnRegistrationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Telephone", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Telephone
		{
			get
			{
				return this._Telephone;
			}
			set
			{
				if ((this._Telephone != value))
				{
					this.OnTelephoneChanging(value);
					this.SendPropertyChanging();
					this._Telephone = value;
					this.SendPropertyChanged("Telephone");
					this.OnTelephoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userregister_download", Storage="_downloads", ThisKey="RegistrationID", OtherKey="RegistrationID")]
		public EntitySet<download> downloads
		{
			get
			{
				return this._downloads;
			}
			set
			{
				this._downloads.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userregister_userfeedback", Storage="_userfeedbacks", ThisKey="RegistrationID", OtherKey="RegistrationID")]
		public EntitySet<userfeedback> userfeedbacks
		{
			get
			{
				return this._userfeedbacks;
			}
			set
			{
				this._userfeedbacks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_downloads(download entity)
		{
			this.SendPropertyChanging();
			entity.userregister = this;
		}
		
		private void detach_downloads(download entity)
		{
			this.SendPropertyChanging();
			entity.userregister = null;
		}
		
		private void attach_userfeedbacks(userfeedback entity)
		{
			this.SendPropertyChanging();
			entity.userregister = this;
		}
		
		private void detach_userfeedbacks(userfeedback entity)
		{
			this.SendPropertyChanging();
			entity.userregister = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.movies")]
	public partial class movy : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MovieID;
		
		private int _CategoryID;
		
		private int _GenreID;
		
		private string _MovieTitle;
		
		private string _MovieDescription;
		
		private string _MovieImage;
		
		private string _Tags;
		
		private EntitySet<download> _downloads;
		
		private EntitySet<userfeedback> _userfeedbacks;
		
		private EntityRef<category> _category;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMovieIDChanging(int value);
    partial void OnMovieIDChanged();
    partial void OnCategoryIDChanging(int value);
    partial void OnCategoryIDChanged();
    partial void OnGenreIDChanging(int value);
    partial void OnGenreIDChanged();
    partial void OnMovieTitleChanging(string value);
    partial void OnMovieTitleChanged();
    partial void OnMovieDescriptionChanging(string value);
    partial void OnMovieDescriptionChanged();
    partial void OnMovieImageChanging(string value);
    partial void OnMovieImageChanged();
    partial void OnTagsChanging(string value);
    partial void OnTagsChanged();
    #endregion
		
		public movy()
		{
			this._downloads = new EntitySet<download>(new Action<download>(this.attach_downloads), new Action<download>(this.detach_downloads));
			this._userfeedbacks = new EntitySet<userfeedback>(new Action<userfeedback>(this.attach_userfeedbacks), new Action<userfeedback>(this.detach_userfeedbacks));
			this._category = default(EntityRef<category>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MovieID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MovieID
		{
			get
			{
				return this._MovieID;
			}
			set
			{
				if ((this._MovieID != value))
				{
					this.OnMovieIDChanging(value);
					this.SendPropertyChanging();
					this._MovieID = value;
					this.SendPropertyChanged("MovieID");
					this.OnMovieIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryID", DbType="Int NOT NULL")]
		public int CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					if (this._category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GenreID", DbType="Int NOT NULL")]
		public int GenreID
		{
			get
			{
				return this._GenreID;
			}
			set
			{
				if ((this._GenreID != value))
				{
					this.OnGenreIDChanging(value);
					this.SendPropertyChanging();
					this._GenreID = value;
					this.SendPropertyChanged("GenreID");
					this.OnGenreIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MovieTitle", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string MovieTitle
		{
			get
			{
				return this._MovieTitle;
			}
			set
			{
				if ((this._MovieTitle != value))
				{
					this.OnMovieTitleChanging(value);
					this.SendPropertyChanging();
					this._MovieTitle = value;
					this.SendPropertyChanged("MovieTitle");
					this.OnMovieTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MovieDescription", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string MovieDescription
		{
			get
			{
				return this._MovieDescription;
			}
			set
			{
				if ((this._MovieDescription != value))
				{
					this.OnMovieDescriptionChanging(value);
					this.SendPropertyChanging();
					this._MovieDescription = value;
					this.SendPropertyChanged("MovieDescription");
					this.OnMovieDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MovieImage", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string MovieImage
		{
			get
			{
				return this._MovieImage;
			}
			set
			{
				if ((this._MovieImage != value))
				{
					this.OnMovieImageChanging(value);
					this.SendPropertyChanging();
					this._MovieImage = value;
					this.SendPropertyChanged("MovieImage");
					this.OnMovieImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tags", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Tags
		{
			get
			{
				return this._Tags;
			}
			set
			{
				if ((this._Tags != value))
				{
					this.OnTagsChanging(value);
					this.SendPropertyChanging();
					this._Tags = value;
					this.SendPropertyChanged("Tags");
					this.OnTagsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="movy_download", Storage="_downloads", ThisKey="MovieID", OtherKey="MovieID")]
		public EntitySet<download> downloads
		{
			get
			{
				return this._downloads;
			}
			set
			{
				this._downloads.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="movy_userfeedback", Storage="_userfeedbacks", ThisKey="MovieID", OtherKey="MovieID")]
		public EntitySet<userfeedback> userfeedbacks
		{
			get
			{
				return this._userfeedbacks;
			}
			set
			{
				this._userfeedbacks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="category_movy", Storage="_category", ThisKey="CategoryID", OtherKey="CategoryID", IsForeignKey=true)]
		public category category
		{
			get
			{
				return this._category.Entity;
			}
			set
			{
				category previousValue = this._category.Entity;
				if (((previousValue != value) 
							|| (this._category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._category.Entity = null;
						previousValue.movies.Remove(this);
					}
					this._category.Entity = value;
					if ((value != null))
					{
						value.movies.Add(this);
						this._CategoryID = value.CategoryID;
					}
					else
					{
						this._CategoryID = default(int);
					}
					this.SendPropertyChanged("category");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_downloads(download entity)
		{
			this.SendPropertyChanging();
			entity.movy = this;
		}
		
		private void detach_downloads(download entity)
		{
			this.SendPropertyChanging();
			entity.movy = null;
		}
		
		private void attach_userfeedbacks(userfeedback entity)
		{
			this.SendPropertyChanging();
			entity.movy = this;
		}
		
		private void detach_userfeedbacks(userfeedback entity)
		{
			this.SendPropertyChanging();
			entity.movy = null;
		}
	}
}
#pragma warning restore 1591
